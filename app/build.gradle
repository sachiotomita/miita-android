apply plugin: 'com.android.application'
apply plugin: 'realm-android'
apply plugin: 'io.fabric'
apply plugin: 'com.google.gms.google-services'

def PACKAGE_NAME = "com.naoto.yamaguchi.miita"
def VERSION_MAJOR = 0
def VERSION_MINOR = 1
def VERSION_PATCH = 0

android {
    compileSdkVersion 24
    buildToolsVersion "24.0.3"

    defaultConfig {
        applicationId PACKAGE_NAME
        minSdkVersion 21
        targetSdkVersion 24
        versionCode VERSION_MAJOR * 100 + VERSION_MINOR * 10 + VERSION_PATCH
        versionName "${VERSION_MAJOR}.${VERSION_MINOR}.${VERSION_PATCH}"

        testInstrumentationRunner "android.support.test.runner.AndroidJUnitRunner"
    }

    signingConfigs {
        debug {
            storeFile rootProject.file("debug.keystore")
            storePassword "android"
            keyAlias "androiddebugkey"
            keyPassword "android"
        }
        release {
            def configFile = file("../deploy/miita/android/release.properties")
            def props = new Properties()
            props.load(new FileInputStream(configFile))

            storeFile file(props.storeFile)
            storePassword props.storePassword
            keyAlias props.keyAlias
            keyPassword props.keyPassword
        }
    }

    buildTypes {
        debug {
            signingConfig signingConfigs.debug
            applicationIdSuffix ".debug"
            versionNameSuffix "-debug"
            debuggable true
            minifyEnabled false

            def configFile = file("../debug.properties")
            def props = new Properties()
            props.load(new FileInputStream(configFile))
            buildConfigField("String", "CLIENT_ID", "\"${props.qiitaClientID}\"")
            buildConfigField("String", "CLIENT_SECRET", "\"${props.qiitaClientSecret}\"")

            ext.enableCrashlytics = false

            manifestPlaceholders = [
                    fabricApiKey: "UNDEFINED",
                    callbackHost: "callback.debug"
            ]
        }
        staging {
            signingConfig signingConfigs.debug
            applicationIdSuffix ".staging"
            versionNameSuffix "-staging"
            debuggable true
            minifyEnabled false

            def configFile = file("../deploy/miita/android/staging.properties")
            def props = new Properties()
            props.load(new FileInputStream(configFile))
            buildConfigField("String", "CLIENT_ID", "\"${props.qiitaClientID}\"")
            buildConfigField("String", "CLIENT_SECRET", "\"${props.qiitaClientSecret}\"")

            ext.enableCrashlytics = false

            manifestPlaceholders = [
                    fabricApiKey: "UNDEFINED",
                    callbackHost: "callback.staging"
            ]
        }
        release {
            signingConfig signingConfigs.release
            debuggable false
            minifyEnabled true
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'

            def configFile = file("../deploy/miita/android/release.properties")
            def props = new Properties()
            props.load(new FileInputStream(configFile))
            buildConfigField("String", "CLIENT_ID", "\"${props.qiitaClientID}\"")
            buildConfigField("String", "CLIENT_SECRET", "\"${props.qiitaClientSecret}\"")

            manifestPlaceholders = [
                    fabricApiKey: props.fabricApiKey,
                    callbackHost: "callback"
            ]
        }
    }
    sourceSets {
        main {
            resources.srcDirs = ['src/main/resources', 'src/androidTest/resources']
        }
        debug {
            manifest.srcFile 'src/debug/AndroidManifest.xml'
        }
        release {
            manifest.srcFile 'src/release/AndroidManifest.xml'
        }
    }
    testOptions {
        unitTests.returnDefaultValues = true
    }
}

dependencies {
    compile fileTree(dir: 'libs', include: ['*.jar'])
    compile 'com.android.support:appcompat-v7:24.0.0'
    compile 'com.android.support:design:24.0.0'
    compile 'com.android.support:support-v4:24.0.0'
    compile 'com.google.android:flexbox:0.2.1'

    // 3rd Party
    compile('com.crashlytics.sdk.android:crashlytics:2.6.5@aar') {
        transitive = true;
    }
    compile 'com.google.firebase:firebase-core:10.0.1'

    // Test
    testCompile 'junit:junit:4.12'
    testCompile 'org.mockito:mockito-core:2.5.0'
    androidTestCompile('com.android.support.test:runner:0.4.1') {
        exclude group: 'com.android.support', module: 'support-annotations'
    }
    androidTestCompile('com.android.support.test:rules:0.4.1') {
        exclude group: 'com.android.support', module: 'support-annotations'
    }
}
